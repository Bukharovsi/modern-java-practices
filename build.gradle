import com.github.benmanes.gradle.versions.updates.DependencyUpdatesTask

plugins {
    id "build-dashboard"
    id "project-report"
    id "com.github.ben-manes.versions"
    id "java"
    id "org.unbroken-dome.test-sets"
    id "checkstyle"
    id "pmd"
    id "com.github.spotbugs"
    id "jacoco"
    id "info.solidsoft.pitest"
}

version = "0-SNAPSHOT"
group = "demo"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly "com.github.spotbugs:spotbugs-annotations:$spotbugsVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "com.github.stefanbirkner:system-lambda:$systemLambdaVersion"

    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:$findsecbugsPluginVersion"
}

test {
    // NB -- JaCoCo draws from _unit tests_, not integration tests
    // When tests fail, you still have a coverage report
    finalizedBy jacocoTestReport
}

testSets {
    integrationTest
}

tasks.withType(Test) {
    // This idiom ensures JUnit5 for integration tests, not just unit tests
    useJUnitPlatform()
}

checkstyle {
    toolVersion = checkstyleVersion
}

pmd {
    ignoreFailures = false
    toolVersion = pmdVersion
}

spotbugs {
    toolVersion = spotbugsVersion
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 1.00
            }
        }
    }
}

pitest {
    // TODO: Teach pitest to ignore Lombok code
    coverageThreshold = 38
    junit5PluginVersion = pitestJUnit5PluginVersion
    mutationThreshold = 100
    timestampedReports = false
    verbose = true
}

tasks.named("pitest") {
    dependsOn jacocoTestCoverageVerification
}

check {
    dependsOn += jacocoTestCoverageVerification
    dependsOn += "pitest"
    dependsOn += integrationTest
}

tasks.withType(DependencyUpdatesTask) {
    rejectVersionIf {
        !isStable(candidate.version) && isStable(currentVersion)
    }
}

wrapper {
    gradleVersion = gradleWrapperVersion
    distributionType = "ALL"
}

def otherReleasePatterns = ~'^[0-9,.v-]+(-r)?$'

def isStable(version) {
    val stableKeyword = listOf "RELEASE", "FINAL", "GA".any {
        version.toUpperCase.contains(it)
    }
    val otherReleasePattern = version ==~ otherReleasePatterns

    return stableKeyword || otherReleasePattern
}
